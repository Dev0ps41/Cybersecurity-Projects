from flask import Flask, request, jsonify, render_template
import subprocess
import os
import time
from owasp_zap_v2.0 import ZAPv2
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = './reports'

# OWASP ZAP Configuration
ZAP_API_KEY = 'your_zap_api_key'  # Replace with your ZAP API key
ZAP_HOST = 'localhost'
ZAP_PORT = 8080
zap = ZAPv2(apikey=ZAP_API_KEY, proxies={
    'http': f'http://{ZAP_HOST}:{ZAP_PORT}',
    'https': f'http://{ZAP_HOST}:{ZAP_PORT}'
})

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/scan', methods=['POST'])
def scan():
    url = request.form.get('url')
    if not url:
        return jsonify({"error": "URL is required"}), 400

    zap.urlopen(url)
    time.sleep(2)
    scan_id = zap.ascan.scan(url)

    while int(zap.ascan.status(scan_id)) < 100:
        time.sleep(5)

    alerts = zap.core.alerts(baseurl=url)
    report_path = os.path.join(app.config['UPLOAD_FOLDER'], f"report_{int(time.time())}.html")
    with open(report_path, 'w') as report_file:
        report_file.write(zap.core.htmlreport())

    return jsonify({"message": "Scan completed", "alerts": alerts, "report": report_path})

@app.route('/email', methods=['POST'])
def send_email():
    email = request.form.get('email')
    report_path = request.form.get('report_path')

    if not email or not report_path:
        return jsonify({"error": "Email and report path are required"}), 400

    smtp_server = 'smtp.gmail.com'
    smtp_port = 587
    smtp_user = 'your_email@gmail.com'
    smtp_password = 'your_password'

    msg = MIMEMultipart()
    msg['From'] = smtp_user
    msg['To'] = email
    msg['Subject'] = 'Vulnerability Scan Report'
    msg.attach(MIMEText('Please find the attached report.', 'plain'))

    with open(report_path, 'r') as f:
        attachment = MIMEText(f.read(), 'html')
        attachment.add_header('Content-Disposition', 'attachment', filename=os.path.basename(report_path))
        msg.attach(attachment)

    server = smtplib.SMTP(smtp_server, smtp_port)
    server.starttls()
    server.login(smtp_user, smtp_password)
    server.send_message(msg)
    server.quit()

    return jsonify({"message": "Email sent successfully"})

if __name__ == '__main__':
    os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)
    app.run(debug=True)
